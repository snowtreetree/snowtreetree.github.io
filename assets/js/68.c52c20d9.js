(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{412:function(t,e,a){"use strict";a.r(e);var r=a(42),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-面试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-面试"}},[t._v("#")]),t._v(" React 面试")]),t._v(" "),a("p",[t._v("声明式、组件化，用于构建用户界面的JavaScript库。")]),t._v(" "),a("p",[t._v("声明式：告诉程序要做什么。\n命令式：告诉程序怎么去做。")]),t._v(" "),a("p",[t._v("函数式编程：关心数据的映射。\n命令式编程：关心解决问题的步骤。")]),t._v(" "),a("h2",{attrs:{id:"virtual-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom"}},[t._v("#")]),t._v(" Virtual DOM")]),t._v(" "),a("p",[t._v("真实DOM在内存中的标识。")]),t._v(" "),a("h2",{attrs:{id:"jsx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx"}},[t._v("#")]),t._v(" JSX")]),t._v(" "),a("p",[t._v("JavaScript的语法扩展。\n为什么使用：渲染逻辑与其他的UI逻辑内在耦合。在 UI 中需要绑定处理事件、在某些时刻状态发生变化时需要通知到 UI，以及需要在 UI 中展示准备好的数据。")]),t._v(" "),a("h2",{attrs:{id:"hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hooks"}},[t._v("#")]),t._v(" Hooks")]),t._v(" "),a("p",[t._v("16.8+, 可以在函数组件中使用state等特性。")]),t._v(" "),a("h2",{attrs:{id:"类组件和函数式组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类组件和函数式组件"}},[t._v("#")]),t._v(" 类组件和函数式组件")]),t._v(" "),a("p",[t._v("类组件：通过Class类定义组件，可以使用生命周期、state等。\n函数组件：只接受props对象并返回一个React元素，本质上是JavaScript函数。")]),t._v(" "),a("p",[t._v("函数组件不需要实例化，性能比类组件高，但是没有生命周期和state，但是现在Hook可以弥补。")]),t._v(" "),a("h2",{attrs:{id:"避免组件重新渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避免组件重新渲染"}},[t._v("#")]),t._v(" 避免组件重新渲染")]),t._v(" "),a("p",[t._v("React.memo\nPureComponent")]),t._v(" "),a("h2",{attrs:{id:"受控和非受控组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#受控和非受控组件"}},[t._v("#")]),t._v(" 受控和非受控组件")]),t._v(" "),a("p",[t._v("受控组件：React控制取值的表单输入（input、textarea、select等）元素叫做受控组件。表单元素的state放到React的状态属性中，并且通过setState更新。")]),t._v(" "),a("p",[t._v("非受控组件：状态更新不通过React，使用"),a("code",[t._v("ref")]),t._v("获取表单数据。")]),t._v(" "),a("h2",{attrs:{id:"高阶组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高阶组件"}},[t._v("#")]),t._v(" 高阶组件")]),t._v(" "),a("p",[t._v("复用组件的一种技巧。\n参数是组件，返回新组建的函数。")]),t._v(" "),a("h2",{attrs:{id:"fiber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber"}},[t._v("#")]),t._v(" Fiber")]),t._v(" "),a("h3",{attrs:{id:"解决的问题🤔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决的问题🤔"}},[t._v("#")]),t._v(" 解决的问题🤔")]),t._v(" "),a("p",[t._v("当加载或者更新组件树时，需要调用各个组件的生命周期函数，计算和对比Virtual DOM，最后再去更新DOM树，整个过程是同步的，整个周期可能周期较长。用户在操作页面的时候，有时会看到页面卡顿的现象。")]),t._v(" "),a("h3",{attrs:{id:"fiber处理的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber处理的方式"}},[t._v("#")]),t._v(" Fiber处理的方式")]),t._v(" "),a("p",[t._v("将耗时长的任务进行分片，每一片执行完成，都会将控制权交给React负责任务协调的模块，看下是否有紧急任务需要去做，没有的话就去集训更新。")]),t._v(" "),a("h3",{attrs:{id:"影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#影响"}},[t._v("#")]),t._v(" 影响")]),t._v(" "),a("p",[t._v("一个任务可能还没完成，就被打断执行其他任务，继续执行的时候，之前的任务可能会重头再来。")]),t._v(" "),a("h2",{attrs:{id:"super"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#super"}},[t._v("#")]),t._v(" super")]),t._v(" "),a("p",[t._v("在class组件constructor中，调用super之前，是无法访问this的。")]),t._v(" "),a("h2",{attrs:{id:"生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),a("h3",{attrs:{id:"_16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16"}},[t._v("#")]),t._v(" <16")]),t._v(" "),a("h4",{attrs:{id:"componentwillmount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentwillmount"}},[t._v("#")]),t._v(" componentWillMount")]),t._v(" "),a("p",[t._v("渲染之前，只发生一次。")]),t._v(" "),a("h4",{attrs:{id:"componentdidmount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentdidmount"}},[t._v("#")]),t._v(" componentDidMount")]),t._v(" "),a("p",[t._v("第一次渲染之后，只在客户端。")]),t._v(" "),a("h4",{attrs:{id:"componentwillreceiveprops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentwillreceiveprops"}},[t._v("#")]),t._v(" componentWillReceiveProps")]),t._v(" "),a("p",[t._v("prop更新的时候，初始化render的时候不会调用。")]),t._v(" "),a("h4",{attrs:{id:"shouldcomponenetupdate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shouldcomponenetupdate"}},[t._v("#")]),t._v(" shouldComponenetUpdate")]),t._v(" "),a("p",[t._v("prop或state更新时调用。")]),t._v(" "),a("h4",{attrs:{id:"componentwillupdate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentwillupdate"}},[t._v("#")]),t._v(" componentWillUpdate")]),t._v(" "),a("p",[t._v("更新之前。")]),t._v(" "),a("h4",{attrs:{id:"componentdidupdate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentdidupdate"}},[t._v("#")]),t._v(" componentDidUpdate")]),t._v(" "),a("p",[t._v("更新之后。")]),t._v(" "),a("h4",{attrs:{id:"componentwillunmount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentwillunmount"}},[t._v("#")]),t._v(" componentWillUnmount")]),t._v(" "),a("p",[t._v("组件移出。")]),t._v(" "),a("h4",{attrs:{id:"getderivedstatefromerror"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getderivedstatefromerror"}},[t._v("#")]),t._v(" getDerivedStateFromError")]),t._v(" "),a("h4",{attrs:{id:"componentdidcatch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentdidcatch"}},[t._v("#")]),t._v(" componentDidCatch")]),t._v(" "),a("h3",{attrs:{id:"_16-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-3"}},[t._v("#")]),t._v(" 16.3+")]),t._v(" "),a("p",[t._v("新增了一些生命周期，并弱化了componentWillReceiveProps，componentWillMount，componentWillUpdate（均为render之前）。")]),t._v(" "),a("h4",{attrs:{id:"getderivedstatefromprops-nextprops-prevstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getderivedstatefromprops-nextprops-prevstate"}},[t._v("#")]),t._v(" getDerivedStateFromProps(nextProps, prevState)")]),t._v(" "),a("p",[t._v("用来取代之前的ComponentWillReceiveProps。")]),t._v(" "),a("h4",{attrs:{id:"getsnapshotbeforeupdate-prevprops-prevstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getsnapshotbeforeupdate-prevprops-prevstate"}},[t._v("#")]),t._v(" getSnapshotBeforeUpdate(prevProps,prevState)")]),t._v(" "),a("p",[t._v("render 之后执行，执行的时候DOM还未更新。\n返回的参数会作为componentDidUpdate 的第三个参数。")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5cf0733de51d4510803ce34e",target:"_blank",rel:"noopener noreferrer"}},[t._v("你要的 React 面试知识点，都在这了"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://www.zhihu.com/question/28292740/answer/40336090",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是函数式编程思维？- 知乎"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/38030418",target:"_blank",rel:"noopener noreferrer"}},[t._v("React v16.3之后的组件生命周期函数"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);