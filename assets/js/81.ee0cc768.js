(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{424:function(t,e,r){"use strict";r.r(e);var a=r(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"双向绑定"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双向绑定"}},[t._v("#")]),t._v(" 双向绑定")]),t._v(" "),r("p",[t._v("视图变化更新数据，数据变化更新视图。")]),t._v(" "),r("p",[t._v("实现：Vue 内容通过Objective.defineProperty方法属性拦截的方式，把data对象中的数据的读写转化成getter/setter，当数据变化时通知识图更新。")]),t._v(" "),r("h2",{attrs:{id:"mvvm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[t._v("#")]),t._v(" MVVM")]),t._v(" "),r("p",[t._v("软件架构设计模式。促进了前后端的逻辑分离。Model层负责数据，View层是用户看到的界面，ViewModel是前端组织生成和维护的视图数据层。")]),t._v(" "),r("h2",{attrs:{id:"mvc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[t._v("#")]),t._v(" MVC")]),t._v(" "),r("p",[t._v("M - Model: 模型，用于处理应用程序数据逻辑部分。更新的时候通知View层。\nV - View: 视图，处理数据显示。 接受用户交互请求，转交给Controller。\nC - Controller: 控制器，处理用户交互部分。操作Model数据。")])])}),[],!1,null,null,null);e.default=s.exports}}]);