(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{380:function(t,a,r){"use strict";r.r(a);var e=r(43),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"执行上下文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),r("p",[t._v("执行上下文（execution context 简称EC）是代码的执行环境，通常由三种（Global、function、eval）")]),t._v(" "),r("h2",{attrs:{id:"es3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es3"}},[t._v("#")]),t._v(" ES3")]),t._v(" "),r("h2",{attrs:{id:"生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),r("p",[t._v("执行上下文大致有两个阶段：创建，执行，销毁。")]),t._v(" "),r("h3",{attrs:{id:"创建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[t._v("#")]),t._v(" 创建")]),t._v(" "),r("ul",[r("li",[t._v("绑定this")]),t._v(" "),r("li",[t._v("创建词法环境。基于代码的嵌套结构，来定义标识符/变量/函数的关联。可以把词法环境看做标识到变量的映射。词法环境内部又分为环境记录器和外部环境引用\n"),r("ul",[r("li",[t._v("环境记录器是存储变量和函数声明的实际位置")]),t._v(" "),r("li",[t._v("外部环境的引用就是可以访问父级以上的词法环境")])])]),t._v(" "),r("li",[t._v("创建变量环境。也是一种词法环境，和上面词法环境不同的是，变量环境用来存储var变量绑定，上面的是用来存储函数声明和变量（const,let）的绑定。")])]),t._v(" "),r("h3",{attrs:{id:"执行：xxx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#执行：xxx"}},[t._v("#")]),t._v(" 执行：xxx")]),t._v(" "),r("h3",{attrs:{id:"销毁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#销毁"}},[t._v("#")]),t._v(" 销毁")]),t._v(" "),r("p",[t._v("一般函数执行完就会被销毁。闭包例外。")]),t._v(" "),r("h2",{attrs:{id:"执行上下文中的内容"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文中的内容"}},[t._v("#")]),t._v(" 执行上下文中的内容")]),t._v(" "),r("h3",{attrs:{id:"变量对象（variable-object-简称-vo）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#变量对象（variable-object-简称-vo）"}},[t._v("#")]),t._v(" 变量对象（variable object 简称 VO）")]),t._v(" "),r("p",[t._v("JS 引擎会用当前函数的参数列表（arguments）初始化一个 “变量对象” 并将当前执行上下文与之关联 ，函数代码块中声明的 变量 和 函数 将作为属性添加到这个变量对象上，函数表达式不会放到变量对象上。")]),t._v(" "),r("h3",{attrs:{id:"活动对象（activation-object-简称-ao）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#活动对象（activation-object-简称-ao）"}},[t._v("#")]),t._v(" 活动对象（activation object 简称 AO）")]),t._v(" "),r("p",[t._v("当函数进到执行阶段，原本的变量对象，被激活成活动对象。")]),t._v(" "),r("h2",{attrs:{id:"作用域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),r("p",[t._v("规定了可以查找和可以使用的变量。")]),t._v(" "),r("h2",{attrs:{id:"作用域链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),r("p",[t._v("当查找变量的时候，灰熊当前的上下文变量对象中查找，如果没能够找到，会向上（父级）的变量对象中查找，一直找到全局上下文的变量对象。")]),t._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.im/post/5ebced85e51d454dc1467664",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试官：说说执行上下文吧"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.im/post/5ba32171f265da0ab719a6d7",target:"_blank",rel:"noopener noreferrer"}},[t._v("理解 JavaScript 中的执行上下文和执行栈"),r("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=s.exports}}]);