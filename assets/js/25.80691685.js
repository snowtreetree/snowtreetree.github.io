(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{370:function(t,a,s){"use strict";s.r(a);var r=s(43),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"http2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2"}},[t._v("#")]),t._v(" HTTP2")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("HTTP2采用二进制格式传输，解析更高效，HTTP1.x采用文本格式。")])]),t._v(" "),s("h2",{attrs:{id:"http2改进内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2改进内容"}},[t._v("#")]),t._v(" HTTP2改进内容")]),t._v(" "),s("p",[t._v("提高了HTTP1.x的性能，在兼容1.x的基础上，进一步减少了网络延迟。特点：多路复用，二进制分帧，首部压缩（SPDY），服务器推送")]),t._v(" "),s("h3",{attrs:{id:"多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[t._v("#")]),t._v(" 多路复用")]),t._v(" "),s("p",[t._v("允许同时发起多重请求-响应"),s("br"),t._v("\n多路复用代替了HTTP1.x的序列和阻塞机制。同域名下的请求都会通过同一个TCP连接并完成。在HTTP1.x中，并发请求会创建多个TCP连接，浏览器会控制在6-8个连接。"),s("br"),t._v("\n多路复用消除了TCP连接带来的延时和内存消耗，请求之间也不会相互影响")]),t._v(" "),s("h3",{attrs:{id:"二进制分帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制分帧"}},[t._v("#")]),t._v(" 二进制分帧")]),t._v(" "),s("p",[t._v("在应用层（HTTP2）和传输层（UDP或TCP）只不过之间增加一个二进制分帧层。"),s("br"),t._v("\n二进制分帧层会将传输的信息分割为更小的消息和帧，并进行二进制编码。")]),t._v(" "),s("h3",{attrs:{id:"服务器推送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器推送"}},[t._v("#")]),t._v(" 服务器推送")]),t._v(" "),s("p",[t._v("服务器还没有收到响应的请求，就把各种资源推送给浏览器")])])}),[],!1,null,null,null);a.default=e.exports}}]);